==================
Simple expressions
==================

x = 5;
new_var = 1 /old_var;
subtraction = x - 5;
addition = 5 + x;
exponentiation = 15.2 ^ x;

------------------
(source_file
  (equation
    (definition)
    (integer_literal))
  (equation
    (identifier)
    (binary_expression
      (integer_literal)
      (identifier)))
  (equation
    (identifier)
    (binary_expression
      (identifier)
      (integer_literal)))
  (equation
    (identifier)
    (binary_expression
      (integer_literal)
      (identifier)))
  (equation
    (identifier)
    (binary_expression
      (float_literal)
      (identifier))))

==========================
Binary operator precedence
==========================

new_var *= old_var+1 / 2;
new_var *= (old_var+1) * 2;

--------------------------
(source_file
  (equation
    (identifier)
    (binary_expression
      (identifier)
      (binary_expression
        (integer_literal)
        (integer_literal))))
  (equation
    (identifier)
    (binary_expression
      (parenthesised_expression
        (binary_expression
          (identifier)
          (integer_literal)))
      (integer_literal))))

=========================
Unary operator precedence
=========================
maths = - a1 * b2;
exponent = -a2 ^ 3;
multiply = a4 * - b5;
negative_parentheses = - (a_variable);
unary_subtraction = - 5 - 5;
unary_exponent = x ^ +y;

-------------------------
(source_file
  (equation
      (identifier)
      (binary_expression
        (unary_expression
          (identifier))
        (identifier)))
    (equation
      (identifier)
      (unary_expression
        (binary_expression
          (identifier)
          (integer_literal))))
    (equation
      (identifier)
      (binary_expression
        (identifier)
        (unary_expression
          (identifier))))
    (equation
      (identifier)
      (unary_expression
        (parenthesised_expression
          (identifier))))
    (equation
      (identifier)
      (binary_expression
        (unary_expression
          (integer_literal))
        (integer_literal)))
    (equation
      (identifier)
      (binary_expression
        (identifier)
        (unary_expression
          (identifier)))))

=======================
Implicit multiplication
=======================

implicit = var1 var2;
implicit = var1 var2 ^ 3.2;
ident_test = var1 (var2);
macro_test = var1(var2);
parentheses = (12.5/2) (var1 + 8);
as_second_term = first_param / second_param 13.37;

-----------------------
(source_file
  (equation
    (identifier)
    (binary_expression
      (identifier)
      (identifier)))
  (equation
    (identifier)
    (binary_expression
      (identifier)
      (binary_expression
        (identifier)
        (float_literal))))
  (equation
    (identifier)
    (binary_expression
      (identifier)
      (parenthesised_expression
        (identifier))))
  (equation
    (identifier)
    (macro_invocation
      (identifier)
      (argument_list
        (identifier))))
  (equation
    (identifier)
    (binary_expression
      (parenthesised_expression
        (binary_expression
          (float_literal)
          (integer_literal)))
      (parenthesised_expression
        (binary_expression
          (identifier)
          (integer_literal)))))
  (equation
    (identifier)
    (binary_expression
      (binary_expression
        (identifier)
        (identifier))
      (float_literal))))

==============================
Expression as a macro argument
==============================

eqn_params = Divide(a/b);

------------------------------

(source_file
  (equation
    (identifier)
    (macro_invocation
      (identifier)
      (argument_list
        (binary_expression
          (identifier)
          (identifier))))))


=================
Missing semicolon
:error
=================

fail_test = 1 * 2

-----------------
